import time
from opentelemetry import trace
from opentelemetry.sdk.trace import TracerProvider
from opentelemetry.sdk.trace.export import BatchSpanProcessor
from opentelemetry.exporter.jaeger import JaegerExporter
from opentelemetry.sdk.resources import Resource

# Set up the Tracer Provider and Exporter (Jaeger in this case)
resource = Resource(attributes={"service.name": "span-refresh-every-5-mins"})
trace.set_tracer_provider(TracerProvider(resource=resource))
tracer = trace.get_tracer(__name__)

jaeger_exporter = JaegerExporter(
    agent_host_name="localhost",  # Set your Jaeger host if needed
    agent_port=6831,
)

span_processor = BatchSpanProcessor(jaeger_exporter)
trace.get_tracer_provider().add_span_processor(span_processor)

# Function to create and return a new span every 5 minutes
def get_current_span():
    current_span = None
    last_span_time = time.time()

    while True:
        # Check if 5 minutes have passed (300 seconds)
        if time.time() - last_span_time >= 300:
            # Close the previous span if it exists
            if current_span:
                current_span.end()
                print("Previous span closed.")
            
            # Start a new span
            current_span = tracer.start_span("refresh_span_every_5_minutes")
            current_span.set_attribute("key", "value")
            current_span.add_event("Starting a new span")

            # Update the timestamp for the new span
            last_span_time = time.time()
            print("New span created.")
        
        # Return the current active span
        yield current_span
        
        # Wait a short interval before rechecking (e.g., 1 second)
        time.sleep(1)

if __name__ == "__main__":
    span_generator = get_current_span()

    # Continuously retrieve the current span in the main program
    while True:
        current_span = next(span_generator)
        print(f"Current span: {current_span}")
        time.sleep(5)  # Example usage, change according to your needs
