import psutil
import time
import os
from opentelemetry import trace
from opentelemetry.sdk.trace import TracerProvider
from opentelemetry.sdk.trace.export import BatchSpanProcessor
from opentelemetry.exporter.otlp.proto.grpc.trace_exporter import OTLPSpanExporter
from opentelemetry.sdk.resources import Resource

# Configurar OpenTelemetry con mejores prácticas
resource = Resource.create({
    "service.name": "resource-monitor",
    "host.name": os.uname().nodename
})

provider = TracerProvider(resource=resource)
exporter = OTLPSpanExporter(endpoint="your-otlp-endpoint")
span_processor = BatchSpanProcessor(exporter)
provider.add_span_processor(span_processor)
trace.set_tracer_provider(provider)
tracer = trace.get_tracer(__name__)

# Umbrales para alertas de alto consumo
CPU_THRESHOLD = 80  # porcentaje de uso de CPU
MEMORY_THRESHOLD = 80  # porcentaje de uso de Memoria

def log_high_usage_processes(span):
    """Registra información de procesos con alto consumo de recursos."""
    for proc in psutil.process_iter(['pid', 'name', 'cpu_percent', 'memory_percent']):
        if proc.info['cpu_percent'] > CPU_THRESHOLD or proc.info['memory_percent'] > MEMORY_THRESHOLD:
            span.add_event("high_resource_usage", {
                "process.pid": proc.info['pid'],
                "process.name": proc.info['name'],
                "process.cpu_percent": proc.info['cpu_percent'],
                "process.memory_percent": proc.info['memory_percent']
            })

def monitor_resources():
    while True:
        with tracer.start_as_current_span("resource_monitoring") as span:
            # Monitoreo de uso de CPU
            cpu_usage = psutil.cpu_percent(interval=1)
            span.set_attribute("cpu.usage_percent", cpu_usage)

            # Monitoreo de uso de Memoria
            memory_info = psutil.virtual_memory()
            span.set_attribute("memory.total", memory_info.total)
            span.set_attribute("memory.available", memory_info.available)
            span.set_attribute("memory.used", memory_info.used)
            span.set_attribute("memory.usage_percent", memory_info.percent)

            # Monitoreo de uso de Red
            net_io = psutil.net_io_counters()
            span.set_attribute("network.bytes_sent", net_io.bytes_sent)
            span.set_attribute("network.bytes_recv", net_io.bytes_recv)

            # Verificar alto uso de recursos
            if cpu_usage > CPU_THRESHOLD or memory_info.percent > MEMORY_THRESHOLD:
                span.add_event("high_resource_usage_alert", {
                    "cpu.usage_percent": cpu_usage,
                    "memory.usage_percent": memory_info.percent
                })
                log_high_usage_processes(span)

            # Salida en consola para monitoreo local
            print(f"CPU Usage: {cpu_usage}%")
            print(f"Memory Usage: {memory_info.percent}%")
            print(f"Network - Bytes Sent: {net_io.bytes_sent}, Bytes Received: {net_io.bytes_recv}")

            # Dormir por un intervalo de tiempo
            time.sleep(10)

if __name__ == "__main__":
    try:
        monitor_resources()
    except KeyboardInterrupt:
        print("Resource monitoring stopped.")
