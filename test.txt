Short Technical Interview Questions and Answers (English)

1. FastAPI / Flask

Q1: What is a key difference between FastAPI and Flask?  
A:  
- FastAPI focuses on speed and built-in data validation (through Pydantic), automatically generating OpenAPI docs.  
- Flask is more minimal and flexible, requiring additional extensions for features like authentication or data validation.

Q2: How would you handle data validation in FastAPI?  
A:  
- Use Pydantic models to define the expected data structure.  
- FastAPI automatically validates incoming requests and returns an HTTP 422 error on invalid data.

---

2. Multithreading / Multiprocessing

Q1: When would you use multithreading in Python?  
A:  
- For I/O-bound tasks (e.g., network requests, file operations).  
- The Global Interpreter Lock (GIL) is less problematic when threads are mostly waiting for I/O.

Q2: When would you use multiprocessing?  
A:  
- For CPU-bound tasks (e.g., heavy computations, large in-memory data processing).  
- Each process has its own Python interpreter, avoiding the GIL and enabling true parallelism for CPU-intensive work.

---

3. Pandas

Q1: How do you read a CSV file into a DataFrame using Pandas?  
A:  
```python
import pandas as pd

df = pd.read_csv('file.csv')
```

Q2: How do you filter rows in a DataFrame based on a condition?  
A:  
- Use boolean indexing, for example:
```python
filtered_df = df[df['column'] > 10]
```

---

4. Unit Tests

Q1: Which libraries would you use for unit testing in Python?  
A:  
- unittest (in the standard library)  
- pytest (popular for simplicity and powerful features)

Q2: How would you structure a simple unit test?  
A:  
1. Setup: Prepare test data/environment.  
2. Action: Call the function to test.  
3. Assertion: Verify the results with assert statements.  
4. Teardown (optional): Clean up if needed.

---

5. Basic Database Knowledge

Q1: What is the difference between a relational database and a NoSQL database?  
A:  
- Relational (SQL): Data in tables with strict schemas and complex transactions.  
- NoSQL: Flexible schemas, often better for large-scale horizontal scalability, high performance, and large-volume data.

Q2: How can you optimize a slow SQL query?  
A:  
- Create or check indexes on columns used in WHERE or JOIN clauses.  
- Simplify subqueries or adjust JOIN strategies if necessary.

---

6. Linux / Shell Scripts

Q1: How do you display the last 20 lines of a log file in Linux?  
A:  
```bash
tail -n 20 logfile.log
```

Q2: How do you create a simple “Hello World” shell script and make it executable?  
A:  
1. Create hello.sh with:
   ```bash
   #!/bin/bash
   echo "Hello World"
   ```
2. Make it executable:
   ```bash
   chmod +x hello.sh
   ```
3. Run with ./hello.sh

---

7. Docker

Q1: What is Docker, and what is it used for?  
A:  
- Docker is a platform to package an application with its dependencies in a container, ensuring consistent execution across environments.

Q2: What is a Dockerfile?  
A:  
- A Dockerfile is a text file with instructions to build a Docker image, specifying the base OS, dependencies, and commands.

---

8. Cloud

Q1: What are the advantages of deploying applications in the cloud instead of on-premises?  
A:  
- Scalability on demand  
- Pay-as-you-go model, reducing upfront hardware costs  
- Simplified infrastructure maintenance handled by the cloud provider

Q2: Name a container orchestration service in the cloud.  
A:  
- AWS ECS or AWS EKS  
- Google Kubernetes Engine (GKE)  
- Azure Kubernetes Service (AKS)

---

9. AI/ML, LLM

Q1: What is a Large Language Model (LLM), and when would you use it?  
A:  
- An LLM is an AI model trained on vast amounts of text to understand and generate natural language.  
- It’s used for tasks like answering questions, summarizing text, or translating.

Q2: What is the main difference between a traditional ML model and an LLM?  
A:  
- A traditional ML model is typically trained for a specific task (e.g., classification).  
- An LLM is trained on huge text datasets, enabling it to handle a broader range of language tasks with more flexibility.
