The APIClient class provides functionality to perform API requests either asynchronously or synchronously, based on the use_async parameter. This flexibility allows you to optimize your application's performance and resource usage according to your specific needs.

Features:

Asynchronous Requests: By setting use_async to True, API requests are made concurrently using Python's asyncio library, allowing high throughput and efficient resource utilization. The max_concurrent_requests parameter controls the maximum number of concurrent requests, preventing system overload and managing resource consumption effectively.
Synchronous Requests: By setting use_async to False, API requests are made sequentially in a blocking manner. This mode is simpler and may be more suitable for applications with lower concurrency requirements.
Usage:

max_concurrent_requests: This parameter defines the maximum number of API requests that can be executed concurrently when operating in asynchronous mode. It helps in throttling the requests to avoid overwhelming the server or consuming excessive system resources. A typical starting value is 100. However, the optimal number can vary depending on factors such as network latency, server capacity, and system resources. Users should experiment with different values to find the best performance for their specific use case. Monitoring and logging tools can assist in identifying bottlenecks and adjusting the max_concurrent_requests value accordingly.
use_async: This boolean parameter determines whether the API requests should be executed asynchronously (True) or synchronously (False).
