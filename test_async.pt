import pytest
from unittest.mock import AsyncMock, patch
from your_module import APIClient  # Aseg√∫rate de importar tu clase correctamente

@pytest.mark.asyncio
async def test_fetch_success(mocker):
    mock_response = AsyncMock()
    mock_response.status_code = 200
    mock_client = AsyncMock()
    mock_client.get.return_value = mock_response

    api_client = APIClient(max_concurrent_requests=10)
    
    with patch('httpx.AsyncClient', return_value=mock_client):
        response = await api_client.fetch(mock_client, 'http://example.com')
        assert response.status_code == 200
        assert api_client.success_count == 1
        assert api_client.failure_count == 0

@pytest.mark.asyncio
async def test_fetch_failure(mocker):
    mock_response = AsyncMock()
    mock_response.status_code = 404
    mock_client = AsyncMock()
    mock_client.get.return_value = mock_response

    api_client = APIClient(max_concurrent_requests=10)
    
    with patch('httpx.AsyncClient', return_value=mock_client):
        response = await api_client.fetch(mock_client, 'http://example.com')
        assert response.status_code == 404
        assert api_client.success_count == 0
        assert api_client.failure_count == 1

@pytest.mark.asyncio
async def test_fetch_exception(mocker):
    mock_client = AsyncMock()
    mock_client.get.side_effect = httpx.RequestError("Request error")

    api_client = APIClient(max_concurrent_requests=10)
    
    with patch('httpx.AsyncClient', return_value=mock_client):
        response = await api_client.fetch(mock_client, 'http://example.com')
        assert response is None
        assert api_client.success_count == 0
        assert api_client.failure_count == 1

@pytest.mark.asyncio
async def test_fetch_all(mocker):
    urls = ['http://example.com'] * 10
    mock_response = AsyncMock()
    mock_response.status_code = 200
    mock_client = AsyncMock()
    mock_client.get.return_value = mock_response

    api_client = APIClient(max_concurrent_requests=10)
    
    with patch('httpx.AsyncClient', return_value=mock_client):
        responses = await api_client.fetch_all(urls)
        assert len(responses) == len(urls)
        assert api_client.success_count == len(urls)
        assert api_client.failure_count == 0

def test_execute(mocker):
    urls = ['http://example.com'] * 10
    mock_response = AsyncMock()
    mock_response.status_code = 200
    mock_client = AsyncMock()
    mock_client.get.return_value = mock_response

    api_client = APIClient(max_concurrent_requests=10)
    
    with patch('httpx.AsyncClient', return_value=mock_client):
        with patch('asyncio.run', return_value=[mock_response] * len(urls)):
            responses = api_client.execute(urls)
            assert len(responses) == len(urls)
            assert api_client.success_count == len(urls)
            assert api_client.failure_count == 0
